// Code generated by protoc-gen-go.
// source: bled.proto
// DO NOT EDIT!

/*
Package bled is a generated protocol buffer package.

It is generated from these files:
	bled.proto

It has these top-level messages:
	Dummy
	DeviceOptions
	DeviceID
	Advertisement
	UUID
	ServiceData
*/
package bled

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Dummy struct {
}

func (m *Dummy) Reset()                    { *m = Dummy{} }
func (m *Dummy) String() string            { return proto.CompactTextString(m) }
func (*Dummy) ProtoMessage()               {}
func (*Dummy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeviceOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeviceOptions) Reset()                    { *m = DeviceOptions{} }
func (m *DeviceOptions) String() string            { return proto.CompactTextString(m) }
func (*DeviceOptions) ProtoMessage()               {}
func (*DeviceOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeviceID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeviceID) Reset()                    { *m = DeviceID{} }
func (m *DeviceID) String() string            { return proto.CompactTextString(m) }
func (*DeviceID) ProtoMessage()               {}
func (*DeviceID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Advertisement struct {
	LocalName        string         `protobuf:"bytes,1,opt,name=LocalName,json=localName" json:"LocalName,omitempty"`
	ManufacturerData []byte         `protobuf:"bytes,2,opt,name=ManufacturerData,json=manufacturerData,proto3" json:"ManufacturerData,omitempty"`
	ServiceData      []*ServiceData `protobuf:"bytes,3,rep,name=ServiceData,json=serviceData" json:"ServiceData,omitempty"`
	Services         []*UUID        `protobuf:"bytes,4,rep,name=Services,json=services" json:"Services,omitempty"`
	OverflowService  []*UUID        `protobuf:"bytes,5,rep,name=OverflowService,json=overflowService" json:"OverflowService,omitempty"`
	TxPowerLevel     int32          `protobuf:"varint,6,opt,name=TxPowerLevel,json=txPowerLevel" json:"TxPowerLevel,omitempty"`
	Connectable      bool           `protobuf:"varint,7,opt,name=Connectable,json=connectable" json:"Connectable,omitempty"`
	SolicitedService *UUID          `protobuf:"bytes,8,opt,name=SolicitedService,json=solicitedService" json:"SolicitedService,omitempty"`
	RSSI             int32          `protobuf:"varint,9,opt,name=RSSI,json=rSSI" json:"RSSI,omitempty"`
	Address          string         `protobuf:"bytes,10,opt,name=Address,json=address" json:"Address,omitempty"`
}

func (m *Advertisement) Reset()                    { *m = Advertisement{} }
func (m *Advertisement) String() string            { return proto.CompactTextString(m) }
func (*Advertisement) ProtoMessage()               {}
func (*Advertisement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Advertisement) GetServiceData() []*ServiceData {
	if m != nil {
		return m.ServiceData
	}
	return nil
}

func (m *Advertisement) GetServices() []*UUID {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Advertisement) GetOverflowService() []*UUID {
	if m != nil {
		return m.OverflowService
	}
	return nil
}

func (m *Advertisement) GetSolicitedService() *UUID {
	if m != nil {
		return m.SolicitedService
	}
	return nil
}

type UUID struct {
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,json=uUID,proto3" json:"UUID,omitempty"`
}

func (m *UUID) Reset()                    { *m = UUID{} }
func (m *UUID) String() string            { return proto.CompactTextString(m) }
func (*UUID) ProtoMessage()               {}
func (*UUID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ServiceData struct {
	UUID *UUID  `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *ServiceData) Reset()                    { *m = ServiceData{} }
func (m *ServiceData) String() string            { return proto.CompactTextString(m) }
func (*ServiceData) ProtoMessage()               {}
func (*ServiceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceData) GetUUID() *UUID {
	if m != nil {
		return m.UUID
	}
	return nil
}

func init() {
	proto.RegisterType((*Dummy)(nil), "bled.Dummy")
	proto.RegisterType((*DeviceOptions)(nil), "bled.DeviceOptions")
	proto.RegisterType((*DeviceID)(nil), "bled.DeviceID")
	proto.RegisterType((*Advertisement)(nil), "bled.Advertisement")
	proto.RegisterType((*UUID)(nil), "bled.UUID")
	proto.RegisterType((*ServiceData)(nil), "bled.ServiceData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Bled service

type BledClient interface {
	NewCentral(ctx context.Context, in *DeviceOptions, opts ...grpc.CallOption) (*DeviceID, error)
	Scan(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (Bled_ScanClient, error)
	StopScanning(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*Dummy, error)
}

type bledClient struct {
	cc *grpc.ClientConn
}

func NewBledClient(cc *grpc.ClientConn) BledClient {
	return &bledClient{cc}
}

func (c *bledClient) NewCentral(ctx context.Context, in *DeviceOptions, opts ...grpc.CallOption) (*DeviceID, error) {
	out := new(DeviceID)
	err := grpc.Invoke(ctx, "/bled.bled/NewCentral", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bledClient) Scan(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (Bled_ScanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Bled_serviceDesc.Streams[0], c.cc, "/bled.bled/Scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &bledScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bled_ScanClient interface {
	Recv() (*Advertisement, error)
	grpc.ClientStream
}

type bledScanClient struct {
	grpc.ClientStream
}

func (x *bledScanClient) Recv() (*Advertisement, error) {
	m := new(Advertisement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bledClient) StopScanning(ctx context.Context, in *Dummy, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := grpc.Invoke(ctx, "/bled.bled/StopScanning", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bled service

type BledServer interface {
	NewCentral(context.Context, *DeviceOptions) (*DeviceID, error)
	Scan(*Dummy, Bled_ScanServer) error
	StopScanning(context.Context, *Dummy) (*Dummy, error)
}

func RegisterBledServer(s *grpc.Server, srv BledServer) {
	s.RegisterService(&_Bled_serviceDesc, srv)
}

func _Bled_NewCentral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BledServer).NewCentral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bled.bled/NewCentral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BledServer).NewCentral(ctx, req.(*DeviceOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bled_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Dummy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BledServer).Scan(m, &bledScanServer{stream})
}

type Bled_ScanServer interface {
	Send(*Advertisement) error
	grpc.ServerStream
}

type bledScanServer struct {
	grpc.ServerStream
}

func (x *bledScanServer) Send(m *Advertisement) error {
	return x.ServerStream.SendMsg(m)
}

func _Bled_StopScanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Dummy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BledServer).StopScanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bled.bled/StopScanning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BledServer).StopScanning(ctx, req.(*Dummy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bled_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bled.bled",
	HandlerType: (*BledServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCentral",
			Handler:    _Bled_NewCentral_Handler,
		},
		{
			MethodName: "StopScanning",
			Handler:    _Bled_StopScanning_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _Bled_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("bled.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xb5, 0x6c, 0x39, 0x96, 0x47, 0x4a, 0xe2, 0x4e, 0x2f, 0xc2, 0x94, 0x22, 0xb6, 0x50, 0x4c,
	0x28, 0xa1, 0xc4, 0xa5, 0x77, 0x13, 0x5d, 0x04, 0x69, 0x52, 0xa4, 0xfa, 0x03, 0xd6, 0xd2, 0xa4,
	0x08, 0xa4, 0x5d, 0xb3, 0x5a, 0xdb, 0xed, 0x87, 0x14, 0xfa, 0xb9, 0x65, 0xd7, 0x32, 0x96, 0xdc,
	0x93, 0x66, 0xde, 0xbc, 0x37, 0xa3, 0x9d, 0x79, 0x00, 0x9b, 0x8a, 0x8a, 0xfb, 0xad, 0x92, 0x5a,
	0xa2, 0x6b, 0x62, 0x36, 0x81, 0x71, 0xbc, 0xab, 0xeb, 0xdf, 0xec, 0x03, 0x5c, 0xc7, 0xb4, 0x2f,
	0x73, 0x7a, 0xd9, 0xea, 0x52, 0x8a, 0x06, 0x11, 0x5c, 0xc1, 0x6b, 0x0a, 0x9d, 0xc8, 0x59, 0x4c,
	0x53, 0x1b, 0xb3, 0x39, 0x78, 0x47, 0x52, 0x12, 0xe3, 0x0d, 0x0c, 0xcb, 0xc2, 0x56, 0xc7, 0xe9,
	0xb0, 0x2c, 0xd8, 0xdf, 0x11, 0x5c, 0xaf, 0x8a, 0x3d, 0x29, 0x5d, 0x36, 0x54, 0x93, 0xd0, 0xf8,
	0x0e, 0xa6, 0x4f, 0x32, 0xe7, 0xd5, 0xf3, 0xb9, 0xcd, 0xb4, 0x3a, 0x01, 0x78, 0x07, 0xb3, 0x6f,
	0x5c, 0xec, 0x5e, 0x79, 0xae, 0x77, 0x8a, 0x54, 0xcc, 0x35, 0x0f, 0x87, 0x91, 0xb3, 0x08, 0xd2,
	0x59, 0x7d, 0x81, 0xe3, 0x12, 0xfc, 0x8c, 0x94, 0x19, 0x6c, 0x69, 0xa3, 0x68, 0xb4, 0xf0, 0x1f,
	0xde, 0xdc, 0xdb, 0xd7, 0x74, 0x0a, 0xa9, 0xdf, 0x9c, 0x13, 0xfc, 0x08, 0x5e, 0x5b, 0x6b, 0x42,
	0xd7, 0x2a, 0xe0, 0xa8, 0x58, 0xaf, 0x93, 0x38, 0xf5, 0x5a, 0x6a, 0x83, 0x5f, 0xe0, 0xf6, 0x65,
	0x4f, 0xea, 0xb5, 0x92, 0x87, 0x96, 0x1f, 0x8e, 0xff, 0xa3, 0xdf, 0xca, 0x3e, 0x05, 0x19, 0x04,
	0x3f, 0x7e, 0x7d, 0x97, 0x07, 0x52, 0x4f, 0xb4, 0xa7, 0x2a, 0xbc, 0xb2, 0x8b, 0x08, 0x74, 0x07,
	0xc3, 0x08, 0xfc, 0x47, 0x29, 0x04, 0xe5, 0x9a, 0x6f, 0x2a, 0x0a, 0x27, 0x91, 0xb3, 0xf0, 0x52,
	0x3f, 0x3f, 0x43, 0xf8, 0x15, 0x66, 0x99, 0xac, 0xca, 0xbc, 0xd4, 0x54, 0x9c, 0x86, 0x7b, 0x91,
	0x73, 0x31, 0x7c, 0xd6, 0x5c, 0x70, 0xcc, 0x71, 0xd2, 0x2c, 0x4b, 0xc2, 0xa9, 0x9d, 0xea, 0xaa,
	0x2c, 0x4b, 0x30, 0x84, 0xc9, 0xaa, 0x28, 0x14, 0x35, 0x4d, 0x08, 0x76, 0xd9, 0x13, 0x7e, 0x4c,
	0xd9, 0x1c, 0x5c, 0xd3, 0xc7, 0xa8, 0xcc, 0xd7, 0xde, 0x22, 0x48, 0xdd, 0xdd, 0x3a, 0x89, 0xd9,
	0xaa, 0xb7, 0x5a, 0x7c, 0xdf, 0xa1, 0xf4, 0x7f, 0xc2, 0xd2, 0x4d, 0x8b, 0xce, 0xa5, 0xdc, 0x82,
	0x6b, 0xfe, 0xf0, 0xc7, 0x01, 0x6b, 0x26, 0x5c, 0x02, 0x3c, 0xd3, 0xe1, 0x91, 0x84, 0x56, 0xbc,
	0xc2, 0xb7, 0x47, 0x71, 0xcf, 0x55, 0xf3, 0x9b, 0x2e, 0x98, 0xc4, 0x6c, 0x80, 0x9f, 0xc0, 0xcd,
	0x72, 0x2e, 0xd0, 0x6f, 0x2b, 0xc6, 0x8d, 0xf3, 0x56, 0xdb, 0xf3, 0x13, 0x1b, 0x7c, 0x76, 0xf0,
	0x0e, 0x82, 0x4c, 0xcb, 0xad, 0x51, 0x88, 0x52, 0xfc, 0xec, 0xab, 0xba, 0x09, 0x1b, 0x6c, 0xae,
	0xac, 0xd1, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x22, 0x80, 0xcd, 0x50, 0xf6, 0x02, 0x00,
	0x00,
}
